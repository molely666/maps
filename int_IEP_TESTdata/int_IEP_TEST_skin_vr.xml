<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - BACK -->


  <style name="IconBACK"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconBACK"
         onover="onoverIconBACK"
         onout="onoutIconBACK"

         height="30"
         width="30"
         />
  <action name="onhoverIconBACK">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconBACK">
tween(scale, 1.2);


  </action>
  <action name="onoutIconBACK">
    hideTooltip();
    tween(scale, 1);


  </action>



  <!-- unsupported kind of display : PointMap -->


  
  <!-- Spot Style - Default Polygon Spot Style -->
  <style name="PolygonDefaultPolygonSpotStyle"
           visible="false"
           bordercolor="0xffffff"
           fillcolor="0xffffff"
           borderwidth="2"
           borderalpha="0.80000000000000004"
           fillalpha="0.0099946593423361554"
           capture="false"
           onhover="onhoverPolygonDefaultPolygonSpotStyle"
           onover="onoverPolygonDefaultPolygonSpotStyle"
           onout="onoutPolygonDefaultPolygonSpotStyle"
           />
  <action name="onhoverPolygonDefaultPolygonSpotStyle">
    showTooltip('hotspot');
  </action>

  <action name="onoverPolygonDefaultPolygonSpotStyle">
    set(bordercolor, 0xffffff);
    set(fillcolor, 0xffffff);
    set(borderalpha, 0.90000762951094837);
    set(fillalpha, 0.20000000000000001);
    set(borderwidth, 2);
  </action>

  <action name="onoutPolygonDefaultPolygonSpotStyle">

    set(bordercolor, 0xffffff);
    set(fillcolor, 0xffffff);
    set(borderalpha, 0.80000000000000004);
    set(fillalpha, 0.0099946593423361554);

    set(borderwidth, 2);
    hideTooltip();
  </action>



    
  <!-- Spot Style - Info -->


  <style name="IconInfo"
         url="%FIRSTXML%/spots/hotspot_plan_user_defaultpoint1.png"
         visible="false"
         edge="center"
         onhover="onhoverIconInfo"
         onout="onoutIconInfo"

         height="20"
         width="20"
         />
  <action name="onhoverIconInfo">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconInfo">
    hideTooltip();



  </action>



    
  <!-- Spot Style - FORWARD_lg -->


  <style name="IconFORWARD_lg"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint3.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconFORWARD_lg"
         onover="onoverIconFORWARD_lg"
         onout="onoutIconFORWARD_lg"

         height="70"
         width="70"
         />
  <action name="onhoverIconFORWARD_lg">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconFORWARD_lg">
tween(scale, 1.2);


  </action>
  <action name="onoutIconFORWARD_lg">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - FORWARD -->


  <style name="IconFORWARD"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint5.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconFORWARD"
         onover="onoverIconFORWARD"
         onout="onoutIconFORWARD"

         height="30"
         width="30"
         />
  <action name="onhoverIconFORWARD">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconFORWARD">
tween(scale, 1.2);


  </action>
  <action name="onoutIconFORWARD">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - BACK_lg -->


  <style name="IconBACK_lg"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint10.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconBACK_lg"
         onover="onoverIconBACK_lg"
         onout="onoutIconBACK_lg"

         height="50"
         width="50"
         />
  <action name="onhoverIconBACK_lg">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconBACK_lg">
tween(scale, 1.2);


  </action>
  <action name="onoutIconBACK_lg">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - FORWARD_220 -->


  <style name="IconFORWARD_220"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint11.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="220"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconFORWARD_220"
         onover="onoverIconFORWARD_220"
         onout="onoutIconFORWARD_220"

         height="50"
         width="50"
         />
  <action name="onhoverIconFORWARD_220">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconFORWARD_220">
tween(scale, 1.2);


  </action>
  <action name="onoutIconFORWARD_220">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - BACK_320 -->


  <style name="IconBACK_320"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint12.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="320"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconBACK_320"
         onover="onoverIconBACK_320"
         onout="onoutIconBACK_320"

         height="50"
         width="50"
         />
  <action name="onhoverIconBACK_320">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconBACK_320">
tween(scale, 1.2);


  </action>
  <action name="onoutIconBACK_320">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - FORWARD_190 -->


  <style name="IconFORWARD_190"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint13.png"
         visible="false"
         frame="0"
         lastframe="15"
         framewidth="98"
         frameheight="43"
         stopspotsequence="false"
         crop="0|0|98|43"
         edge="center"
         rotate="190"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconFORWARD_190"
         onover="onoverIconFORWARD_190"
         onout="onoutIconFORWARD_190"

         height="50"
         width="50"
         />
  <action name="onhoverIconFORWARD_190">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconFORWARD_190">
tween(scale, 1.2);


  </action>
  <action name="onoutIconFORWARD_190">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - Info_sm -->


  <style name="IconInfo_sm"
         url="%FIRSTXML%/spots/hotspot_plan_user_defaultpoint14.png"
         visible="false"
         edge="center"
         onhover="onhoverIconInfo_sm"
         onout="onoutIconInfo_sm"

         height="12"
         width="12"
         />
  <action name="onhoverIconInfo_sm">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconInfo_sm">
    hideTooltip();



  </action>



  <action name="displayImage">
    if (layer[displayedStandardImage],
      if(layer[displayedStandardImage].doNotDeleteMe,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, false);
        
        if (%1 == layer[displayedStandardImage].url,
          applyDisplayedImageObjectAnimation(%8);
        ,
          setDisplayedImageObjectParameters(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10);
        );
      ,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, true);
        events.dispatch(onremovedisplayedobject);
        delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      );
    ,
      if(%10,
        addlayer(displayedStandardImageOverlay);
        set(layer[displayedStandardImageOverlay].keep, false);
        set(layer[displayedStandardImageOverlay].width, 100%);
        set(layer[displayedStandardImageOverlay].height, 100%);
        set(layer[displayedStandardImageOverlay].type, container);
        set(layer[displayedStandardImageOverlay].zorder, 98);
        set(layer[displayedStandardImageOverlay].visible, false);
        set(layer[displayedStandardImageOverlay].onclick, applyDisplayedImageObjectAnimation(%8););
        set(layer[displayedStandardImageOverlay].bgcolor, "0x%11");
        set(layer[displayedStandardImageOverlay].bgalpha, %12);
        set(layer[displayedStandardImageOverlay].bgcapture, true);
      );
      addlayer(displayedStandardImage);
      set(layer[displayedStandardImage].keep, false);
      set(layer[displayedStandardImage].onclick, applyDisplayedImageObjectAnimation(%8););
      set(layer[displayedStandardImage].zorder , 99);
      set(layer[displayedStandardImage].currentCall, true);
      set(layer[displayedStandardImage].doNotDeleteMe, true);
      set(layer[displayedStandardImage].onloaded, resizeDisplayedImageObject());
      events.dispatch(onremovedisplayedobject);
      delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      set(layer[displayedStandardImage].visible, false);
    );
  </action>
  <action name="applyDisplayedImageObjectAnimation">resumeautorotation(forcehotspot);

    if (%1,
      stoptween(layer[displayedStandardImage].width, layer[displayedStandardImage].height);
      tween(layer[displayedStandardImage].width|layer[displayedStandardImage].height, 1|1, 1, easeOutQuad, WAIT);
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    ,
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    );
  </action>
  <action name="setDisplayedImageObjectParameters">
    set(layer[displayedStandardImage].url       , %1);
    set(layer[displayedStandardImage].align     , %2);
    set(layer[displayedStandardImage].x         , %3);
    set(layer[displayedStandardImage].y         , %4);
    set(layer[displayedStandardImage].imgwidth  , %5);
    set(layer[displayedStandardImage].imgheight , %6);
    set(layer[displayedStandardImage].animated  , %8);
    set(layer[displayedStandardImage].applyratio, %9);
    set(layer[displayedStandardImage].overlay   , %10);
    if (%7,pauseautorotation(forcehotspot);
);
  </action>
  <action name="resizeDisplayedImageObject">
    if(layer[displayedStandardImage].url,
    set(layer[displayedStandardImage].fullwidth, get(layer[displayedStandardImage].width));
    set(layer[displayedStandardImage].fullheight, get(layer[displayedStandardImage].height));
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].width , 1);
      set(layer[displayedStandardImage].height, 1);
    );
    if(layer[displayedStandardImage].imgwidth != "" AND layer[displayedStandardImage].imgheight != "",
      if(layer[displayedStandardImage].imgwidth == "prop",
        set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
        indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
        if(tempDisplayedImageObjectHeightPercent GT 0,
          txtreplace(tempDisplayedImageObjectHeight, '%', '');
          mul(tempDisplayedImageObjectHeight, get(stageheight));
          div(tempDisplayedImageObjectHeight, 100);
          Math.round(tempDisplayedImageObjectHeight);
        );
        mul(flyingImgWidth,get(layer[displayedStandardImage].fullwidth),get(tempDisplayedImageObjectHeight));
        div(flyingImgWidth,get(layer[displayedStandardImage].fullheight));
        Math.round(flyingImgWidth);
        set(layer[displayedStandardImage].imgwidth , get(flyingImgWidth));
        set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
      ,
        if(layer[displayedStandardImage].imgheight == "prop",
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          mul(flyingImgHeight,get(layer[displayedStandardImage].fullheight),get(tempDisplayedImageObjectWidth));
          div(flyingImgHeight,get(layer[displayedStandardImage].fullwidth));
          Math.round(flyingImgHeight);
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight , get(flyingImgHeight));
        ,
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          if(tempDisplayedImageObjectHeightPercent GT 0,
            txtreplace(tempDisplayedImageObjectHeight, '%', '');
            mul(tempDisplayedImageObjectHeight, get(stageheight));
            div(tempDisplayedImageObjectHeight, 100);
            Math.round(tempDisplayedImageObjectHeight);
          );
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
        );
      );
    ,
      set(layer[displayedStandardImage].imgwidth , get(layer[displayedStandardImage].fullwidth));
      set(layer[displayedStandardImage].imgheight, get(layer[displayedStandardImage].fullheight));
    );
    
    set(resizedwidth, get(layer[displayedStandardImage].imgwidth));
    set(resizedheight, get(layer[displayedStandardImage].imgheight));
    if(layer[displayedStandardImage].applyratio,
      sub(resizedstagewidth, get(stagewidth), get(layer[displayedStandardImage].x));
      sub(resizedstageheight, get(stageheight), get(layer[displayedStandardImage].y));
      Math.abs(resizedstagewidth);
      Math.abs(resizedstageheight);
      if(resizedwidth GT resizedstagewidth,
        mul(tempresizedheight, get(resizedheight), get(resizedstagewidth));
        div(tempresizedheight, get(resizedwidth));
        Math.round(tempresizedheight);
        set(resizedwidth, get(resizedstagewidth));
        set(resizedheight, get(tempresizedheight));
      );
      if(resizedheight GT resizedstageheight,
        mul(tempresizedwidth, get(resizedwidth), get(resizedstageheight));
        div(tempresizedwidth, get(resizedheight));
        Math.round(tempresizedwidth);
        set(resizedheight, get(resizedstageheight));
        set(resizedwidth, get(tempresizedwidth));
      );
    );
    
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].animated, false);
      tween(layer[displayedStandardImage].width , get(resizedwidth), 1, easeOutQuad);
      tween(layer[displayedStandardImage].height, get(resizedheight), 1, easeOutQuad);
    ,
      set(layer[displayedStandardImage].width , get(resizedwidth));
      set(layer[displayedStandardImage].height, get(resizedheight));
    );
    if(layer[displayedStandardImage].overlay,set(layer[displayedStandardImageOverlay].visible, true););
    set(layer[displayedStandardImage].visible, true);
    ,
      delayedcall(0.2,resizeDisplayedImageObject(););
    );
  </action>
  <events name="displayedImageObjectEvents" keep="true" onremovedisplayedobject="displayedImageObjectOnRemoveDisplayedObject" onresize="if(layer[displayedStandardImage],resizeDisplayedImageObject());" />
  <action name="displayedImageObjectOnRemoveDisplayedObject">
    ifnot(layer[displayedStandardImage].currentCall,if(layer[displayedStandardImage].visible,resumeautorotation(forcehotspot);

      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););
      removelayer(displayedStandardImage);
    ););
  </action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>
	<!-- Hide/Show hotspots by category - action for Panotour Pro 2.5+ -->
	
	<action name="categoryHideHotspots">
        ifnot(category_copied, set(firstCategory,%1); set(category_copied,true));
        if(%2 === null,
			set(category_state_copied, 'hidden');
        );
		delayedcall(0.1,
            for( set(hs,0), hs LT hotspot.count, inc(hs),
                if(hotspot[get(hs)].tag == '%1',
                    keepHotspotsState(get(hotspot[get(hs)].style), false, get(hotspot[get(hs)].name),%2);
                );
            );
        );
    </action>
	<action name="categoryShowHotspots">
        if(%2 === null,
			set(category_state_copied, 'visible');
        );
		delayedcall(0.1,
            for( set(hs,0), hs LT hotspot.count, inc(hs),
                if(hotspot[get(hs)].tag == '%1',
                    keepHotspotsState(get(hotspot[get(hs)].style), true, get(hotspot[get(hs)].name));
                );
            );
        );
    </action>
	
	<!-- Action to set visibility on new pano -->
	<action name="setVisibilityFromStateForCategory"> 
        if(firstCategory !== null,
			for( set(hsv,0), hsv LT hotspot.count, inc(hsv),
				setVisibilityForState(get(hotspot[get(hsv)].style), get(hsv));
			);
			categoryHideHotspots(get(firstCategory),true);
		);
    </action>
	
	<!-- Set hotspots visibility according to the toggle button state -->
	<action name="checkToggleButtonsCategory">
		if(firstCategory !== null,
			checkToogleButtons(get(firstCategory), false);
		);
    </action>
	<action name="checkToggleStateCategory"> 
        if(%1 === false,
			categoryShowHotspots(%2, true);
        ,
			if(category_state_copied == 'hidden',
				categoryHideHotspots(%2);
			,	
				categoryShowHotspots(%2);
			);
        );
    </action>
	
	<!-- Event to keep actual visibility on new pano -->
    <events name="hsCategoryEvents" keep="true" onnewscene="if(notHotspotsCategoryFirst, delayedcall(0.1, setVisibilityFromStateForCategory()); delayedcall(0.2, checkToggleButtonsCategory(););, set(notHotspotsCategoryFirst, true));" />
	
    <!-- Hide/Show hotspots by keyword - action for Panotour Pro 2+ -->
    <!-- v0.0.5 -->
    <!-- Action to work with plugin "Panorama Specific - Toggle button" and optionally with plugin "Call Actions on Tour Events" -->
    <!-- dev.alexpopov.me -->

    <!--Action to hide hotspots by keyword -->
    <action name="alpoHideHotspots">
        ifnot(keyword_copied, set(firstKeyword,%1); set(keyword_copied,true));
		if(%2 === null,
			set(keyword_state_copied, 'hidden');
        );
		delayedcall(0.1,
            for( set(hs,0), hs LT hotspot.count, inc(hs),

                indexoftxt(keyWord, get(hotspot[get(hs)].style), %1);

                if(keyWord GE 0,
                    keepHotspotsState(get(hotspot[get(hs)].style), false, get(hotspot[get(hs)].name),%2);
                );
            );
        );
    </action>

    <!--Action to show hotspots by keyword -->
    <action name="alpoShowHotspots">
		if(%2 === null,
			set(keyword_state_copied, 'visible');
        );
		delayedcall(0.1,
            for( set(hs,0), hs LT hotspot.count, inc(hs),

                indexoftxt(keyWord, get(hotspot[get(hs)].style), %1);

                if(keyWord GE 0,
                    keepHotspotsState(get(hotspot[get(hs)].style), true, get(hotspot[get(hs)].name));
                );
            );
        );
    </action>

    <!-- Action to set visibility on new pano -->
    <action name="setVisibilityFromStateForKeyword"> 
        if(firstKeyword !== null,
			for(set(hsv,0), hsv LT hotspot.count, inc(hsv),
				setVisibilityForState(get(hotspot[get(hsv)].style), get(hsv));
			);
			alpoHideHotspots(get(firstKeyword),true);
		);
	</action>

    <!-- Set hotspots visibility according to the toggle button state -->
    <action name="checkToggleButtonsKeyword">
		if(firstKeyword !== null,
			checkToogleButtons(get(firstKeyword), true);
		);
    </action>
    <action name="checkToggleStateKeyword"> 
        if(%1 === false,
			alpoShowHotspots(%2, true);
        ,
			if(keyword_state_copied == 'hidden',
				alpoHideHotspots(%2);
			,	
				alpoShowHotspots(%2);
			);
        );
    </action>
	
    <!-- Event to keep actual visibility on new pano -->
    <events name="hsKeywordEvents" keep="true" onnewscene="if(notHotspotsKeywordFirst, delayedcall(0.1, setVisibilityFromStateForKeyword());delayedcall(0.2, checkToggleButtonsKeyword(););, set(notHotspotsKeywordFirst, true));" />
	
	<!-- global hotspot visibility -->
    <action name="keepHotspotsState">
        if(%4 === null,
            set(hotspot[%3].visible, %2);
            set(style[%1].hsState, %2);
		,
			if(style[%1].hsState === null,
                set(hotspot[%3].visible, %2);
                set(style[%1].hsState, %2);
            );
        );
    </action>
    <action name="setVisibilityForState">
        if(style[%1].hsState !== null,
            copy(hotspot[%2].visible, style[%1].hsState);
        );
    </action>
	<action name="checkToogleButtons">
		for(set(tgl,0);set(tglF,0), tgl LT layer.count, inc(tgl),
			indexoftxt(tglName, get(layer[get(tgl)].name), togglebuttonpanospecific);
			if(tglName GE 0,
				if(%2,
					if(layer[get(tgl)].used_for_hotspots,
						checkToggleStateKeyword(get(layer[get(tgl)].visible),%1);
					);
				,
					if(layer[get(tgl)].used_for_hotspots,
						checkToggleStateCategory(get(layer[get(tgl)].visible),%1);
					);
				);
			);
		);
    </action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


</krpano>